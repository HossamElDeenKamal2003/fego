const express = require("express");
const morgan = require("morgan");
const cors = require("cors");
const mongoose = require("mongoose");
const path = require("path");
const dotenv = require("dotenv");
const multer = require("multer");
const fs = require("fs");
const http = require("http");
const { Server } = require("socket.io");
const {
findDriversInternal,
findDrivers,
} = require("./controller/booking/userBooking");
const { updateLocation } = require("./controller/booking/driverDest");
// Load environment variables
dotenv.config();

// Create Express app
const app = express();
const server = http.createServer(app);
const io = new Server(server);

// Middleware setup
app.use(cors());
app.use(express.json());

// Set EJS as the view engine
app.set("view engine", "ejs");
app.set("views", path.join(__dirname, "views"));

// Middleware for logging HTTP requests
app.use(morgan("combined"));

// Connect to MongoDB
mongoose
.connect(process.env.DB_URL, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => {
    console.log("MongoDB connected");
})
.catch((err) => {
    console.error("MongoDB connection error:", err);
    process.exit(1); // Exit process with failure code
});

// Ensure the directory exists before setting up multer storage
const uploadDir = path.join(__dirname, "uploads");
if (!fs.existsSync(uploadDir)) {
fs.mkdirSync(uploadDir, { recursive: true });
}

// Configure Multer for local file storage
const storage = multer.diskStorage({
destination: function (req, file, cb) {
    cb(null, uploadDir);
},
filename: function (req, file, cb) {
    cb(null, `${Date.now()}${path.extname(file.originalname)}`);
},
});

const upload = multer({ storage: storage });

// Import routes
const user = require("./router/userRouter/userRouter");
const driver = require("./router/userRouter/driverRouter");
const book = require("./router/bookTrip/bookingRouting");
const userProfile = require("./router/userProfile/patchUser");
const driverProfile = require("./router/userProfile/patchDriver");
const prices = require("./router/bookTrip/priceRouter");

// Middleware for static files
app.use("/uploads", express.static(uploadDir));

// Use routers
app.use("/auth", user);
app.use("/authdriver", driver); // Ensure multer middleware is used correctly in the driverRouter
app.use("/book", book);
app.use("/user-profile", userProfile);
app.use("/driverprofile", driverProfile);
app.use("/prices", prices);

// Define a root route to serve an EJS page (optional)
app.get("/", (req, res) => {
res.send("Express");
});
io.on("connection", (socket) => {
console.log("A user connected");

// Handle driver location update event
io.on('connection', (socket) => {
    console.log('A user connected');

    socket.on('updateLocation', async (data) => {
        const { driverId, longitude, latitude } = data;
        
        try {
            const updatedDriver = await updateLocation(driverId, longitude, latitude);

            // Notify clients about location update
            io.emit('driverLocationUpdated', updatedDriver);

            // Check if the updated location matches any user's search criteria
            for (const [socketId, searchCriteria] of Object.entries(userSearches)) {
                const { vehicleType, latitude: searchLat, longitude: searchLng } = searchCriteria;

                if (vehicleType === updatedDriver.vehicleType) {
                    const distance = calculateDistance(searchLat, searchLng, latitude, longitude);

                    if (distance <= 5000) {
                        io.to(socketId).emit('matchingDriverFound', updatedDriver);
                    }
                }
            }
        } catch (error) {
            console.error('Error updating location:', error);
            socket.emit('error', { message: error.message }); // Proper usage of socket
        }
    });

    socket.on('disconnect', () => {
        console.log('A user disconnected');
    });
});


socket.on("disconnect", () => {
    console.log("A user disconnected");
});
});

// Handle 'findDrivers' event from the client
socket.on("findDrivers", async (data) => {
const { vehicleType, latitude, longitude } = data;
console.log(vehicleType, latitude, longitude);
try {
    const drivers = await findDrivers(vehicleType, latitude, longitude);

    if (drivers.length > 0) {
    socket.emit("driversFound", drivers);
    } else {
    socket.emit("noDriversFound", {
        message: "No drivers available in your area",
    });
    }
} catch (error) {
    console.log(error);
    socket.emit("error", { message: error.message });
}
});

// Handle other WebSocket events here

socket.on("disconnect", () => {
console.log("A user disconnected");
});

global.io = io;

// Start the server
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
console.log(`App running on port ${PORT}`);
});

// Handle graceful shutdown
process.on("SIGTERM", () => {
server.close(() => {
    console.log("Process terminated");
});
});
